(self.webpackChunkblog=self.webpackChunkblog||[]).push([[490],{99322:n=>{n.exports='## [763. 划分字母区间](https://leetcode-cn.com/problems/partition-labels/)\n\n字符串 `S` 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。返回一个表示每个字符串片段的长度的列表。\n\n**示例 :**\n\n```\n输入：S = "ababcbacadefegdehijhklij"\n输出：[9,7,8]\n解释：\n划分结果为 "ababcbaca", "defegde", "hijhklij"。\n每个字母最多出现在一个片段中。\n像 "ababcbacadefegde", "hijhklij" 的划分是错误的，因为划分的片段数较少。\n```\n\n#### 解题思路\n\n先确定每个字母最后一次出现所在的位置；然后遍历：当前区间为第一个元素到其最后一次出现的位置，如果这个区间内的元素存在最后一个元素超过原先区间，则扩展当前区间；直到区间内的元素都满足“最后一次出现也在区间内这个条件”，则开始一个新区间\n\n**采取的贪心策略为，每个元素都去扩展一下当前区间的边界。**\n\nC++实现：\n\n```cpp\nclass Solution {\npublic:\n    vector<int> partitionLabels(string S) {\n        if (S.length() < 1)\n            return {0};\n        vector<int> last_char(128, 0);\n        for (int i = 0; i < S.length(); ++i) {\n            last_char[S[i] - \'a\'] = i;\n        }\n        int left = 0, right = last_char[S[0] - \'a\'];\n        vector<int> res;\n        for (int i = 0; i < S.length(); ++i) {\n            if (i > right) {\n                res.push_back(right - left + 1);\n                left = i;\n                right = last_char[S[i] - \'a\'];\n            } else {\n                right = max(right, last_char[S[i] - \'a\']);\n            }\n        }\n        res.push_back(right - left + 1);\n        return res;\n    }\n};\n```\n\nPython实现：\n\n```python\nclass Solution:\n    def partitionLabels(self, S: str) -> List[int]:\n        if len(S) == 1:\n            return [1]\n        res = []\n        c_to_loc = dict()\n        for i, c in enumerate(S):\n            if c in c_to_loc:\n                c_to_loc[c] = [c_to_loc[c][0], i]\n            else:\n                c_to_loc[c] = [i]\n\n        start_loc, next_loc = 0, c_to_loc[S[0]][-1]\n        for i, c in enumerate(S):\n            if i > next_loc:\n                res.append(i - start_loc)\n                next_loc = c_to_loc[c][-1]\n                start_loc = i\n            else:\n                next_loc = max(next_loc, c_to_loc[c][-1])\n        if next_loc + 1 > start_loc:\n            res.append(next_loc - start_loc + 1)\n        return res\n```\n\n\n\n\n\n'}}]);