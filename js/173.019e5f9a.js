(self.webpackChunkblog=self.webpackChunkblog||[]).push([[173],{82173:n=>{n.exports="## [633. 平方数之和](https://leetcode-cn.com/problems/sum-of-square-numbers/)\n\n给定一个非负整数 `c` ，你要判断是否存在两个整数 `a` 和 `b`，使得 `a2 + b2 = c` 。\n\n**示例1 ：**\n\n```\n输入：c = 5\n输出：true\n解释：1 * 1 + 2 * 2 = 5\n```\n\n**示例2 ：**\n\n```\n输入：c = 3\n输出：false\n```\n\n#### 解题思路\n\n其实也可以转换为双指针问题，和167类似；只是改成从区间`[0, floor(sqrt(a))]`的范围进行双指针头尾收缩搜索\n\nC++实现：\n\n```cpp\nclass Solution {\npublic:\n    bool judgeSquareSum(int c) {\n        if (c <= 2)\n            return true;\n        long temp = c;\n        long left = 0, right = sqrt(temp);\n        while (left <= right) {\n            if (left * left + right * right == temp)\n                return true;\n            else if (left * left + right * right < temp)\n                left += 1;\n            else\n                right -= 1;\n        }\n        return false;\n    }\n};\n```\n\nPython实现：\n\n```python\nclass Solution:\n    def judgeSquareSum(self, c: int) -> bool:\n        # 相当于搜索[0,sqrt(c)]范围内的数, 是否存在满足的\n        left, right = 0, math.floor(math.sqrt(c))\n        while left <= right:\n            value = left ** 2 + right ** 2\n            if value == c:\n                return True\n            elif value > c:\n                right -= 1\n            else:\n                left += 1\n        return False\n```\n\n"}}]);