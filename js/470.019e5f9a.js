(self.webpackChunkblog=self.webpackChunkblog||[]).push([[470],{44470:n=>{n.exports="## [122. 买卖股票的最佳时机 II](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/)\n\n给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。\n\n设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。\n\n注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。\n\n**示例 1：**\n\n```\n输入: [7,1,5,3,6,4]\n输出: 7\n解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。\n     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。\n```\n\n**示例 2：**\n\n```\n输入: [1,2,3,4,5]\n输出: 4\n解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。\n     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。\n     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。\n```\n\n#### 解题思路\n\n假设可以开天眼，如果这一天的股票比下一天的低，就在今天买入，下一天卖出\n\n**采取的贪心策略：这一天价格比下一天便宜，就今天买入，下一天卖出；（着眼于下一天）**\n\nC++实现：\n\n```cpp\nclass Solution {\npublic:\n    int maxProfit(vector<int> &prices) {\n        int res = 0;\n        for (int i = 1; i < prices.size(); ++i) {\n            if (prices[i] > prices[i - 1])\n                res += (prices[i] - prices[i - 1]);\n        }\n        return res;\n    }\n};\n\n```\n\nPython实现：\n\n```python\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        res = sum([max(0, price - prices[i]) for i, price in enumerate(prices[1:])])\n        return res\n```\n\n"}}]);