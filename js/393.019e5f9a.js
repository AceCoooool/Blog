(self.webpackChunkblog=self.webpackChunkblog||[]).push([[393],{35393:n=>{n.exports='## [540. 有序数组中的单一元素](https://leetcode-cn.com/problems/single-element-in-a-sorted-array/)\n\n给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。\n\n**示例 1：**\n\n```\n输入: [1,1,2,3,3,4,4,8,8]\n输出: 2\n```\n\n**示例 2：**\n\n```\n输入: [3,3,7,7,10,11,11]\n输出: 10\n```\n\n#### 解题思路\n\n在出现单个数字之前，成对出现的位置都是在"先偶后奇"，但是在出现单个数字之后，就变成了"先奇后偶"，例如示例1中的情况：\n\n```\n[1,1,2,3,3,4,4,8,8]\n 0 1 2 3 4 5 6 7 8\n```\n\nC++实现：\n\n```cpp\nclass Solution {\npublic:\n    int singleNonDuplicate(vector<int> &nums) {\n        int left = 0, right = nums.size() - 1, mid;\n        if (right == left || nums[left] != nums[left + 1])\n            return nums[left];\n        if (nums[right] != nums[right - 1])\n            return nums[right];\n        while (left <= right) {\n            mid = (left + right) / 2;\n            if (nums[mid] != nums[mid - 1] && nums[mid] != nums[mid + 1])\n                return nums[mid];\n            if (mid % 2 == 0) {\n                if (nums[mid] == nums[mid - 1])\n                    right = mid;\n                else\n                    left = mid;\n            } else {\n                if (nums[mid] == nums[mid - 1])\n                    left = mid;\n                else\n                    right = mid;\n            }\n        }\n        return -1;\n    }\n};\n```\n\nPython实现：\n\n```python\nclass Solution:\n    def singleNonDuplicate(self, nums: List[int]) -> int:\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if mid - 1 >= 0 and nums[mid] == nums[mid - 1]:\n                # 凑上mid为偶数时\n                if (mid + 1) % 2 == 0:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            elif mid + 1 < len(nums) and nums[mid] == nums[mid + 1]:\n                # 凑上mid为偶数时\n                if (mid + 1) % 2 == 0:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                return nums[mid]\n        return -1\n```'}}]);