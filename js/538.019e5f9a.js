(self.webpackChunkblog=self.webpackChunkblog||[]).push([[538],{76538:n=>{n.exports='## [142. 环形链表 II](https://leetcode-cn.com/problems/linked-list-cycle-ii/)\n\n给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 `null`。\n\n为了表示给定链表中的环，我们使用整数 `pos` 来表示链表尾连接到链表中的位置（索引从 `0` 开始）。 如果`pos` 是 `-1`，则在该链表中没有环。注意，`pos` 仅仅是用于标识环的情况，并不会作为参数传递到函数中。\n\n说明：不允许修改给定的链表。\n\n进阶：\n\n- 你是否可以使用 O(1) 空间解决此题？\n\n**示例1 ：**\n\n```\n3---2---0---4\n    |       |\n    ---------\n输入：head = [3,2,0,-4], pos = 1\n输出：返回索引为 1 的链表节点\n解释：链表中有一个环，其尾部连接到第二个节点。\n```\n\n**示例2 ：**\n\n```\n1---2\n|   |\n-----\n输入：head = [1,2], pos = 0\n输出：返回索引为 0 的链表节点\n解释：链表中有一个环，其尾部连接到第一个节点。\n```\n\n**示例3 ：**\n\n```\n1\n输入：head = [1], pos = -1\n输出：返回 null\n解释：链表中没有环。\n```\n\n#### 解题思路\n\n对于链表找环路的问题，有一个通用的解法——快慢指针（Floyd 判圈法）。给定两个指针，分别命名为 slow 和 fast，起始位置在链表的开头。每次 fast 前进两步，slow 前进一步。如果 fast可以走到尽头，那么说明没有环路；如果 fast 可以无限走下去，那么说明一定有环路，且一定存在一个时刻 slow 和 fast 相遇。当 slow 和 fast 第一次相遇时，我们将 fast 重新移动到链表开头，并让 slow 和 fast 每次都前进一步。当 slow 和 fast 第二次相遇时，相遇的节点即为环路的开始点。\n\n下面证明一下，假设环里的元素有k个，环外的元素有a个：\n\n第一次相遇的情况：\n\n```\n2*x=s*k+a\nx=u*k+a\n---\x3e x=(s-u)*k \n```\n\n说明第一次相遇后，slow在`(s-u)*k`的位置，只需多走`a`步就到达"环路的起始点"；所以此时将fast挪回起始位置，然后走`a`步就能够再次和slow相遇，且相遇为环路的起始点\n\nC++实现：\n\n```cpp\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        if (head == nullptr || head->next == nullptr)\n            return nullptr;\n        ListNode *slow = head->next, *fast = head->next->next;\n        while (slow != fast) {\n            if (fast == nullptr || fast->next == nullptr)\n                return nullptr;\n            fast = fast->next->next;\n            slow = slow->next;\n        }\n        fast = head;\n        while (fast != slow) {\n            fast = fast->next;\n            slow = slow->next;\n        }\n        return slow;\n    }\n};\n```\n\nPython实现：\n\n```python\nclass Solution:\n    def detectCycle(self, head: ListNode) -> ListNode:\n        if head is None or head.next is None:\n            return None\n        fast_pointer, slow_pointer = head.next.next, head.next\n        # step1: 获取第一次相遇\n        while fast_pointer != slow_pointer:\n            if fast_pointer is None or fast_pointer.next is None:\n                return None\n            fast_pointer = fast_pointer.next.next\n            slow_pointer = slow_pointer.next\n        # step2: 获取第二次相遇\n        fast_pointer = head\n        while fast_pointer != slow_pointer:\n            fast_pointer = fast_pointer.next\n            slow_pointer = slow_pointer.next\n        return fast_pointer\n```\n\n'}}]);