(self.webpackChunkblog=self.webpackChunkblog||[]).push([[492],{24492:n=>{n.exports="## [167. 两数之和 II - 输入有序数组](https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/)\n\n给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。\n\n函数应该返回这两个下标值 `index1` 和 `index2`，其中 `index1` 必须小于 `index2`。\n\n说明:\n\n- 返回的下标值（`index1`和 `index2`）不是从零开始的。\n- 你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。\n\n**示例 ：**\n\n```\n输入: numbers = [2, 7, 11, 15], target = 9\n输出: [1,2]\n解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。\n```\n\n#### 解题思路\n\n因为数组已经排好序，我们可以采用方向相反的双指针来寻找这两个数字，一个初始指向最小的元素，即数组最左边，向右遍历；一个初始指向最大的元素，即数组最右边，向左遍历。\n\n如果两个指针指向元素的和等于给定值，那么它们就是我们要的结果。如果两个指针指向元素的和小于给定值，我们把左边的指针右移一位，使得当前的和增加一点。如果两个指针指向元素的和大于给定值，我们把右边的指针左移一位，使得当前的和减少一点。\n\nC++实现：\n\n```cpp\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int> &numbers, int target) {\n        int left = 0, right = numbers.size() - 1, value;\n        while (left < right) {\n            value = numbers[left] + numbers[right];\n            if (value == target) {\n                return {left + 1, right + 1};\n            } else if (value > target)\n                right -= 1;\n            else\n                left += 1;\n        }\n        return {-1, -1};\n    }\n};\n```\n\nPython实现：\n\n```python\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        left, right = 0, len(numbers) - 1\n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] > target:\n                right -= 1\n            else:\n                left += 1\n        return [-1, -1]\n```\n\n"}}]);