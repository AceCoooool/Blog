(self.webpackChunkblog=self.webpackChunkblog||[]).push([[165],{79165:n=>{n.exports="## [435. 无重叠区间](https://leetcode-cn.com/problems/non-overlapping-intervals/)\n\n给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。\n\n注意:\n\n- 可以认为区间的终点总是大于它的起点。\n- 区间` [1,2] `和` [2,3] `的边界相互“接触”，但没有相互重叠。\n\n**示例 1:**\n\n```\n输入: [ [1,2], [2,3], [3,4], [1,3] ]\n\n输出: 1\n\n解释: 移除 [1,3] 后，剩下的区间没有重叠。\n```\n\n**示例 2:**\n\n```\n输入: [ [1,2], [1,2], [1,2] ]\n\n输出: 2\n\n解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。\n```\n\n#### 解题思路\n\n在选择要保留区间时，区间的结尾十分重要：选择的区间结尾越小，余留给其它区间的空间就越大，就越能保留更多的区间。\n\n**采取的贪心策略为，优先保留结尾小且不相交的区间。**\n\nC++实现：\n\n```cpp\nclass Solution {\npublic:\n    int eraseOverlapIntervals(vector<vector<int>> &intervals) {\n        if (intervals.size() < 1)\n            return 0;\n        sort(intervals.begin(), intervals.end(), [](vector<int> a, vector<int> b) { return a[1] < b[1]; });\n        int res = 0, value = intervals[0][1];\n        for (int i = 1; i < intervals.size(); ++i) {\n            if (intervals[i][0] < value) {\n                res += 1;\n            } else {\n                value = intervals[i][1];\n            }\n        }\n        return res;\n    }\n};\n```\n\nPython实现：\n\n```python\nclass Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        if len(intervals) <= 1:\n            return 0\n        intervals.sort(key=lambda v: v[1])\n        res, cur_val = 0, intervals[0][1]\n        for val in intervals[1:]:\n            if val[0] < cur_val:\n                res += 1\n            else:\n                cur_val = val[1]\n        return res\n```\n\n\n\n\n\n"}}]);