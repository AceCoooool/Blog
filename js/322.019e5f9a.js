(self.webpackChunkblog=self.webpackChunkblog||[]).push([[322],{97322:n=>{n.exports="## [455. 分发饼干](https://leetcode-cn.com/problems/assign-cookies/)\n\n假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。\n\n对每个孩子 `i`，都有一个胃口值 `g[i]`，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 `j`，都有一个尺寸 `s[j]` 。如果 `s[j] >= g[i]`，我们可以将这个饼干` j` 分配给孩子` i` ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。\n\n**示例 1:**\n\n```\n输入: g = [1,2,3], s = [1,1]\n输出: 1\n解释: \n你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。\n虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。\n所以你应该输出1。\n```\n\n**示例 2:**\n\n```\n输入: g = [1,2], s = [1,2,3]\n输出: 2\n解释: \n你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。\n你拥有的饼干数量和尺寸都足以让所有孩子满足。\n所以你应该输出2.\n```\n\n#### 解题思路\n\n因为饥饿度最小的孩子最容易吃饱，所以我们先考虑这个孩子。为了尽量使得剩下的饼干可以满足饥饿度更大的孩子，所以我们应该把大于等于这个孩子饥饿度的、且大小最小的饼干给这个孩子。满足了这个孩子之后，我们采取同样的策略，考虑剩下孩子里饥饿度最小的孩子，直到没有满足条件的饼干存在。\n\n**这里的贪心策略是，给剩余孩子里最小饥饿度的孩子分配最小的能饱腹的饼干。**\n\nC++实现：\n\n```cpp\nclass Solution {\npublic:\n    int findContentChildren(vector<int> &g, vector<int> &s) {\n        sort(g.begin(), g.end());\n        sort(s.begin(), s.end());\n        int g_idx = 0, s_idx = 0;\n        while (g_idx < g.size() && s_idx < s.size()) {\n            if (g[g_idx] <= s[s_idx])\n                ++g_idx;\n            ++s_idx;\n        }\n        return g_idx;\n    }\n};\n```\n\nPython实现：\n\n```python\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        g_idx, g_len = 0, len(g)\n        for s_elem in s:\n            if g_idx < g_len and s_elem >= g[g_idx]:\n                g_idx += 1\n        return g_idx\n```\n\n\n\n\n\n"}}]);